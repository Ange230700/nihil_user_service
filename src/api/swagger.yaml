# user\src\api\swagger.yaml

openapi: 3.0.3
info:
  title: Nihil User Service API
  description: |
    REST API for user management, part of the Nihil microservices platform.
    [View the full monorepo on GitHub](https://github.com/Ange230700/nihil_databases)
  version: "1.0.0"
servers:
  - url: http://localhost:3001/api
    description: Local dev server

tags:
  - name: Users
    description: User CRUD operations

paths:
  /users:
    get:
      tags: [Users]
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserDTO"
    post:
      tags: [Users]
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/UserDTO"
        '409':
          description: Email or username already exists

  /users/{user_id}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/UserDTO"
        '404':
          description: User not found
    put:
      tags: [Users]
      summary: Update user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/UserDTO"
        '404':
          description: User not found
    delete:
      tags: [Users]
      summary: Delete user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: "null"
        '404':
          description: User not found

components:
  schemas:
    UserDTO:
      type: object
      properties:
        user_id:
          type: string
          example: 40cf2348-d871-11ee-8a82-0242ac110002
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        displayName:
          type: string
          nullable: true
          example: John Doe
        avatarUrl:
          type: string
          nullable: true
          example: https://cdn.example.com/avatar.png
        createdAt:
          type: string
          format: date-time
          example: 2024-08-01T10:20:30.000Z
        updatedAt:
          type: string
          format: date-time
          example: 2024-08-01T12:22:45.000Z

    UserCreate:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string

    UserUpdate:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        displayName:
          type: string
        avatarUrl:
          type: string
